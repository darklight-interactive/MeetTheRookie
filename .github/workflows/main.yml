name: Unity - Automated Build
on:
  workflow_dispatch:
  push:
    branches:
      - build
    paths:
      - 'Assets/**/*'
      - 'Packages/**/*'
      - 'ProjectSettings/**/*'
      - .github/workflows/main.yml

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # cancel if a new push is made

permissions:
  actions: read
  pull-requests: write
  checks: write
  id-token: write
  contents: write

jobs:
  # ----- Build for WebGL -----
  buildWebGL:
    name: Build for WebGL üñ•Ô∏è
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      # Check available memory
      - name: Check Memory Usage
        run: free -h
      
      # Check available disk space
      - name: Check Disk Space Before Cleanup
        run: df -h

      # Clean up Docker to free up space
      - name: Clean up Docker to free up space
        run: docker system prune -af

      # Check available disk space after cleanup
      - name: Check Disk Space After Cleanup
        run: df -h

      - name: Restore Library cache
        uses: actions/cache@v4.0.2
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build project
        run: |
          echo "Starting Unity Build"
          set -e  # Stop execution if any command fails
          unity-builder --targetPlatform WebGL || { 
            echo "Unity Build Failed"; 
            cat /path/to/unity-build-error.log; 
          }
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        continue-on-error: true  # Continue even if the build fails to provide more output

      # Capture and log the Unity editor log if the build fails
      - name: Upload Unity Editor Log on Failure
        if: failure()
        run: |
          echo "Build failed, uploading Unity Editor log"
          cat /path/to/Editor.log

      # Upload the build artifact only if it exists
      - name: Upload WebGL Build Artifact
        if: success()  # Upload the build artifact only if the build was successful
        uses: actions/upload-artifact@v4.3.3
        with:
          name: Build-WebGL
          path: ${{ vars.BUILD_PATH }}
          if-no-files-found: warn

  # ----- Build for Windows -----
  buildWindows:
    name: Build for Windows üñ•Ô∏è
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      # Check available memory
      - name: Check Memory Usage
        run: free -h
      
      # Check available disk space
      - name: Check Disk Space Before Cleanup
        run: df -h

      # Clean up Docker to free up space
      - name: Clean up Docker to free up space
        run: docker system prune -af

      # Check available disk space after cleanup
      - name: Check Disk Space After Cleanup
        run: df -h

      - name: Restore Library cache
        uses: actions/cache@v4.0.2
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build project for Windows
        run: |
          echo "Starting Windows Build"
          set -e  # Stop execution if any command fails
          unity-builder --targetPlatform StandaloneWindows64 || { 
            echo "Windows Build Failed"; 
            cat /path/to/unity-build-error.log; 
          }
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        continue-on-error: true  # Continue even if the build fails to provide more output

      # Capture and log the Unity editor log if the build fails
      - name: Upload Unity Editor Log on Failure
        if: failure()
        run: |
          echo "Build failed, uploading Unity Editor log"
          cat /path/to/Editor.log

      # Upload the build artifact only if it exists
      - name: Upload Windows Build Artifact
        if: success()  # Upload the build artifact only if the build was successful
        uses: actions/upload-artifact@v4.3.3
        with:
          name: Build-Windows
          path: ${{ vars.BUILD_PATH }}
          if-no-files-found: warn
